library(readxl)
library(spdep)
library(spatialreg)
library(survey)
sf_boundary <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME == "San Francisco")
ca_pumas <-
pumas("CA", cb = T, progress_bar = F)
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_set_geometry(NULL) %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
temp <- tempfile()
download.file("https://www2.census.gov/programs-surveys/acs/data/pums/2019/1-Year/csv_hca.zip",destfile = temp)
pums_hca_2019_1yr <- read_csv(unzip(temp,"psam_h06.csv"))
unlink(temp)
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(HINCP,TEN,MV,starts_with("WGTP")) %>%
filter_all(all_vars(!is.na(.)))
# all_vars is more strict than any_vars, slightly different result
design <- svrepdesign(
data = data,
type = "ACS",
repweights = data[ ,5:84],
weights = ~WGTP
)
weighted_model <- data %>%
lm(
formula = HINCP ~ TEN + MV,
data = .,
weights = WGTP
)
design <- svrepdesign(
data = data,
type = "ACS",
repweights = data[ ,5:84],
weights = ~as.numeric(WGTP)
)
design <- svrepdesign(
data = data,
type = "ACS",
repweights = data[ ,5:84],
weights = ~as.numeric("WGTP")
)
design <- svrepdesign(
data = data,
type = "ACS",
repweights = data[ ,5:84],
weights = ~WGTP
)
install.packages("tidycensus")
library(tigris)
library(sf)
library(tidyverse)
library(mapview)
library(readxl)
library(spdep)
library(spatialreg)
library(survey)
design <- svrepdesign(
data = data,
type = "ACS",
repweights = data[ ,5:84],
weights = ~WGTP
)
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(HINCP,TEN,MV,starts_with("WGTP")) %>%
filter_all(all_vars(!is.na(.)))
# all_vars is more strict than any_vars, slightly different result
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(
HINCP,
TEN,
MV,
starts_with("WGTP")
) %>%
filter_all(all_vars(!is.na(.)))
# all_vars is more strict than any_vars, slightly different result
library(tigris)
library(sf)
library(tidyverse)
library(mapview)
library(readxl)
library(spdep)
library(spatialreg)
library(survey)
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(
HINCP,
TEN,
MV,
starts_with("WGTP")
) %>%
filter_all(all_vars(!is.na(.)))
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(
HINCP,
TEN,
MV,
starts_with("WGTP")
) %>%
filter_all(all_vars(!is.na(.)))
rm(data)
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(
HINCP,
TEN,
MV,
starts_with("WGTP")
) %>%
filter_all(all_vars(!is.na(.)))
temp <- tempfile()
download.file("https://www2.census.gov/programs-surveys/acs/data/pums/2019/1-Year/csv_hca.zip",destfile = temp)
pums_hca_2019_1yr <- read_csv(unzip(temp,"psam_h06.csv"))
data <- pums_hca_2019_1yr %>%
filter(PUMA %in% sf_pumas$PUMACE10) %>%
mutate(
HINCP = as.numeric(HINCP),
TEN = factor(TEN),
MV = factor(MV)
) %>%
select(
HINCP,
TEN,
MV,
starts_with("WGTP")
) %>%
filter_all(all_vars(!is.na(.)))
knitr::opts_chunk$set(echo = TRUE)
library(flexdashboard)
library(tidyverse)
library(leaflet)
library(sf)
library(plotly)
pge_data_raw <- readRDS("pge_data_raw.rds")
setwd("~/Documents/GitHub/lisiman.github.io")
library(flexdashboard)
library(tidyverse)
library(leaflet)
library(sf)
library(plotly)
pge_data_raw <- readRDS("pge_data_raw.rds")
bay_zips <- readRDS("bay_zips.rds")
usa_zips <-
zctas(cb = T, progress_bar = F)
bay_zips <-
usa_zips %>%
st_centroid() %>%
.[bay_counties, ] %>%
st_drop_geometry() %>%
left_join(usa_zips %>% select(GEOID10)) %>%
st_as_sf()
library(tidyverse)
library(sf)
library(tigris)
library(mapview)
library(leaflet)
ca_counties <- counties("CA", cb = T, progress_bar = F)
usa_zips <-
zctas(cb = T, progress_bar = F)
bay_zips <-
usa_zips %>%
st_centroid() %>%
.[bay_counties, ] %>%
st_drop_geometry() %>%
left_join(usa_zips %>% select(GEOID10)) %>%
st_as_sf()
saveRDS(bay_zips,"bay-zips.rds")
pge_data_raw <- readRDS("pge_data_raw.rds")
bay_zips <- readRDS("bay_zips.rds")
saveRDS(bay_zips,"bay_zips.rds")
pge_data_raw <- readRDS("pge_data_raw.rds")
bay_zips <- readRDS("bay_zips.rds")
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Commercial",
"Elec- Residential"
)
) %>%
group_by(
MONTH,
YEAR,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
chart <- pge_data %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Residential"
),
YEAR == 2020
) %>%
ggplot(
aes(
x = MONTH,
y = TOTALKBTU/1e9
)
) +
geom_line(
aes(
color = YEAR %>% factor()
)
) +
scale_x_discrete(
limits = c(
"Jan",
"Feb",
"Mar",
"Apr",
"May",
"Jun",
"Jul",
"Aug",
"Sep",
"Oct",
"Nov",
"Dec"
)
) +
labs(
x = "",
y = "Total kBTUs (billions)",
title = "Residential Energy Consumption in the Bay Area, 2020",
color = "Year"
) +
theme(legend.position = "none")
chart %>%
ggplotly() %>%
config(displayModeBar = F)
View(bay_zips)
View(bay_counties)
setwd("~/Documents/GitHub/lisiman.github.io")
library(flexdashboard)
library(tidyverse)
library(leaflet)
library(sf)
library(plotly)
pge_data_raw <- readRDS("pge_data_raw.rds")
bay_zips <- readRDS("bay_zips.rds")
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Commercial",
"Elec- Residential",
"Gas- Commercial",
"Gas- Residential"
)
) %>%
group_by(
MONTH,
YEAR,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
chart <- pge_data %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Residential"
),
YEAR == 2020
) %>%
ggplot(
aes(
x = MONTH,
y = TOTALKBTU/1e9
)
) +
geom_line(
aes(
color = YEAR %>% factor()
)
) +
scale_x_discrete(
limits = c(
"Jan",
"Feb",
"Mar",
"Apr",
"May",
"Jun",
"Jul",
"Aug",
"Sep",
"Oct",
"Nov",
"Dec"
)
) +
labs(
x = "",
y = "Total kBTUs (billions)",
title = "Residential Energy Consumption in the Bay Area, 2020",
color = "Year"
) +
theme(legend.position = "none")
chart %>%
ggplotly() %>%
config(displayModeBar = F)
pge_20_res_elec <-
pge_data_raw %>%
filter(
CUSTOMERCLASS == "Elec- Residential",
YEAR == 2020
) %>%
mutate(
ZIPCODE = ZIPCODE %>% as.character()
) %>%
group_by(ZIPCODE) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
right_join(
bay_zips %>% select(GEOID10),
by = c("ZIPCODE" = "GEOID10")
) %>%
st_as_sf() %>%
st_transform(4326)
res_pal <- colorNumeric(
palette = "Reds",
domain =
pge_20_res_elec$TOTALKBTU
)
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
data = pge_20_res_elec,
fillColor = ~res_pal(TOTALKBTU),
color = "white",
opacity = 0.5,
fillOpacity = 0.5,
weight = 1,
label = ~paste0(
round(TOTALKBTU),
" kBTU total in ",
ZIPCODE
),
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addLegend(
data = pge_20_res_elec,
pal = res_pal,
values = ~TOTALKBTU,
title = "Total Residential<br>Electricity (kBTU), 2020"
)
library(shiny)
selectInput(
inputId = "year",
label = "Year: ",
choices = 2017:2020,
selected = 2020 #default
)
input$year
library(flexdashboard)
library(tidyverse)
library(leaflet)
library(sf)
library(plotly)
pge_data_raw <- readRDS("pge_data_raw.rds")
bay_zips <- readRDS("bay_zips.rds")
pge_data <-
pge_data_raw %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Commercial",
"Elec- Residential",
"Gas- Commercial",
"Gas- Residential"
)
) %>%
group_by(
MONTH,
YEAR,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
checkboxGroupInput(
inputId = "year",
label = "Year(s):",
choices = c(2017,2018,2019,2020),
selected = c(2019,2020)
)
input$year
plotlyOutput("plot")
observeEvent(input$year, {
chart <- pge_data %>%
filter(
CUSTOMERCLASS %in% c(
"Elec- Residential"
),
YEAR == input$year
) %>%
ggplot(
aes(
x = MONTH,
y = TOTALKBTU/1e9
)
) +
geom_line(
aes(
color = YEAR %>% factor()
)
) +
scale_x_discrete(
limits = c(
"Jan",
"Feb",
"Mar",
"Apr",
"May",
"Jun",
"Jul",
"Aug",
"Sep",
"Oct",
"Nov",
"Dec"
)
) +
labs(
x = "",
y = "Total kBTUs (billions)",
title = paste0("Residential Energy Consumption in the Bay Area, ", input$year),
color = "Year"
) +
theme(legend.position = "none")
output$plot <- renderPlotly({
chart %>%
ggplotly() %>%
config(displayModeBar = F)
})
})
observeEvent(input$year, print(year))
observeEvent(input$year, year)
